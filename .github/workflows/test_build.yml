name: Test build for PR

on:
  pull_request:
    types: [opened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
    init:
      permissions:
          contents: read
          pull-requests: write
      runs-on: ubuntu-latest
      steps:
        - name: Comment Build started
          run: |
            gh pr comment "$PR_URL" -b "Build started for this PR. [Check logs](${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }})"
          env:
            PR_URL: ${{ github.event.pull_request.html_url }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build:
        needs: init
        permissions:
            contents: read
        runs-on: ubuntu-latest
        steps:
        - name: Checkout 🛎️
          uses: actions/checkout@v4
        - name: Set up Go 🏗️
          uses: actions/setup-go@v4
          with:
            go-version-file: ./go.mod
  
        - name: Build Executables 🗄️ 🔃
          run: |
            mkdir -p bin
            allowed_archs="amd64 arm arm64 386"
            for var in $(go tool dist list); do
              if [[ ! $allowed_archs =~ "$(cut -d '/' -f 2 <<<$var)" ]]; then
                  echo "Skipping: $var"
                  continue
              fi
              file_name="jiotv_go-$(cut -d '/' -f 1 <<<$var)-$(cut -d '/' -f 2 <<<$var)"
              case "$(cut -d '/' -f 1 <<<$var)" in
                  "windows")
                      echo "Building $var"
                      GOOS="$(cut -d '/' -f 1 <<<$var)" GOARCH="$(cut -d '/' -f 2 <<<$var)" go build -o bin/"$file_name.exe" -trimpath -ldflags="-s -w" ./cmd/jiotv_go
                    ;;
                    "linux" | "darwin")
                      echo "Building $var"
                      GOOS="$(cut -d '/' -f 1 <<<$var)" GOARCH="$(cut -d '/' -f 2 <<<$var)" go build -o bin/"$file_name" -trimpath -ldflags="-s -w" ./cmd/jiotv_go
                    ;;
                    *)
                      echo "Skipping: $var"
                    ;;
              esac
            done    

        - name: Upload artifact 📦
          run: |
            for file in bin/*; do
              echo "Uploading $file"
              gh api repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/artifacts \
                -F name="$(basename $file)" \
                -F "artifact_type=go-binary" \
                -F "file=@$file"
            done
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    post_success:
      runs-on: ubuntu-latest
      permissions:
          contents: read
          pull-requests: write
      needs: build
      if: success()
      steps:
        - name: Comment Build success
          run: |
            gh pr comment "$PR_URL" --edit-last -b "Build success for this PR ✅. [Download artifacts](${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }})"
          env:
            PR_URL: ${{ github.event.pull_request.html_url }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    post_failure:
      runs-on: ubuntu-latest
      permissions:
          contents: read
          pull-requests: write
      needs: build
      if: failure()
      steps:
        - name: Comment Build failed
          run: |
            gh pr comment "$PR_URL" --edit-last -b "Build failed for this PR ❌. [Check logs](${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }})"
          env:
            PR_URL: ${{ github.event.pull_request.html_url }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
