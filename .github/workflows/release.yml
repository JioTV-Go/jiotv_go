name: "Build and Release"

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "docs/**"
      - "scripts/**"
      - "**.sh"
      - "**.md"
      - ".github/workflows/dependabot_action.yml"
      - ".github/workflows/pre-release.yml"
      - ".github/workflows/test-build.yml"
      - ".github/workflows/docker.yml"
      - ".github/dependabot.yml"
      - ".github/workflows/sync-wiki.yml"

concurrency:
  group: ${{ github.ref }}-release
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go 📦
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Increment version 📈
        id: gen_tag
        run: |
          # Setup Git
          git config user.name "GitHub Action"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Get the latest semver tag
          tag=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 || true)
          if [[ -z "$tag" ]]; then
            echo "No semver tag found, defaulting to v0.0.0"
            tag="v0.0.0"
          fi
          echo "Latest tag: $tag"

          # Extract version parts
          major_minor_patch="${tag#v}"
          IFS='.' read -r major minor patch <<< "$major_minor_patch"
          echo "Parsed version: $major.$minor.$patch"

          # Get commit messages since last tag
          commit_messages=$(git log "${tag}.." --pretty=%B || true)
          commit_count=$(git rev-list "${tag}.." --count)
          echo "Commits since last tag: $commit_count"

          # Determine version bump type
          if echo "$commit_messages" | grep -qi "BREAKING"; then
            ((major++))
            minor=0
            patch=0
            echo "Detected breaking change, bumping major version"
          elif echo "$commit_messages" | grep -qiE "feat|compatibility|integration|upgrade"; then
            ((minor++))
            patch=0
            echo "Detected feature, bumping minor version"
          else
            ((patch++))
            echo "No major/minor change, bumping patch version"
          fi

          # Generate new version
          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"

          # Update VERSION file and commit
          echo "$new_version" > VERSION
          git add VERSION
          git commit -m "Bump version to ${new_version}"

          # Push to main and develop
          git push origin HEAD:main
          git push origin HEAD:develop

          # Add mirror tags (v1, v1.2)
          git tag -fa "v${major}" -m "Mirror tag $new_version"
          git tag -fa "v${major}.${minor}" -m "Mirror tag $new_version"
          git tag -fa "$new_version" -m "Release $new_version"
          git push origin --tags --force

          # Output tag to GitHub Actions
          echo "tag=$new_version" >> $GITHUB_OUTPUT

      - name: Setup android NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r26b-linux.zip
          unzip -qq android-ndk-r26b-linux.zip
          echo "$PWD/android-ndk-r26b/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Build Executables 🗄️ 🔃
        run: |
          mkdir -p bin
          allowed_archs="amd64 arm arm64 386"
          for var in $(go tool dist list); do
              # skip disallowed archs
              if [[ ! $allowed_archs =~ "$(cut -d '/' -f 2 <<<$var)" ]]; then
                  echo "Skipping: $var"
                  continue
              fi
              # skip arm for windows
              if [[ "$(cut -d '/' -f 1 <<<$var)" == "windows" && "$(cut -d '/' -f 2 <<<$var)" == "arm" ]]; then
                  echo "Skipping: $var (windows/arm)"
                  continue
              fi
              
              file_name="jiotv_go-$(cut -d '/' -f 1 <<< $var)-$(cut -d '/' -f 2 <<< $var)"
              case "$(cut -d '/' -f 1 <<< $var)" in
                  "windows")
                      echo "Building $var"
                      CGO_ENABLED=0 GOOS="$(cut -d '/' -f 1 <<< $var)" GOARCH="$(cut -d '/' -f 2 <<< $var)" go build -o bin/"$file_name.exe" -trimpath -ldflags="-s -w" . &
                      ;;
                  "linux" | "darwin")
                      echo "Building $var"
                      CGO_ENABLED=0 GOOS="$(cut -d '/' -f 1 <<< $var)" GOARCH="$(cut -d '/' -f 2 <<< $var)" go build -o bin/"$file_name" -trimpath -ldflags="-s -w" . &
                      ;;
                  "android")
                      echo "Building $var"
                      case "$(cut -d '/' -f 2 <<<$var)" in
                          "arm")
                            CGO_ENABLED=1 GOOS="$(cut -d '/' -f 1 <<<$var)" GOARCH="$(cut -d '/' -f 2 <<<$var)" CC="armv7a-linux-androideabi28-clang" CXX="armv7a-linux-androideabi28-clang++" go build -o bin/"jiotv_go-$(cut -d '/' -f 1 <<<$var)-$(cut -d '/' -f 2 <<<$var)" -trimpath -ldflags="-s -w" .
                          ;;
                          "arm64")
                            CGO_ENABLED=1 GOOS="$(cut -d '/' -f 1 <<<$var)" GOARCH="$(cut -d '/' -f 2 <<<$var)" CC="aarch64-linux-android32-clang" CXX="aarch64-linux-android32-clang++" go build -o bin/"jiotv_go-$(cut -d '/' -f 1 <<<$var)-$(cut -d '/' -f 2 <<<$var)" -trimpath -ldflags="-s -w" .
                          ;;
                          "amd64")
                            CGO_ENABLED=1 GOOS="$(cut -d '/' -f 1 <<<$var)" GOARCH="$(cut -d '/' -f 2 <<<$var)" CC="x86_64-linux-android32-clang" CXX="x86_64-linux-android32-clang++" go build -o bin/"jiotv_go-$(cut -d '/' -f 1 <<<$var)-$(cut -d '/' -f 2 <<<$var)" -trimpath -ldflags="-s -w" .
                          ;;
                          *)
                            echo "Skipping: $var"
                          ;;
                        esac
                      ;;
                  *)
                      echo "Skipping: $var"
                      ;;
              esac
          done

          # Wait for all background jobs to finish
          wait

          # Build for android5 arm with CC=armv7a-linux-androideabi21-clang
          echo "Building android5 arm"
          CGO_ENABLED=1 GOOS=android GOARCH=arm GOARM=7 CC="armv7a-linux-androideabi21-clang" CXX="armv7a-linux-androideabi21-clang++" go build -o bin/jiotv_go-android5-armv7 -trimpath -ldflags="-s -w" .

      - name: Release 📦
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          tag_name: ${{ steps.gen_tag.outputs.tag }}
          files: |
            ./bin/*
          generate_release_notes: true
          discussion_category_name: releases
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
