name: "Build and Release"

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "**.sh"

concurrency:
  group: ${{ github.ref }}-release
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go 📦
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: Increment version 📈
        id: gen_tag
        run: |
          # Get the latest tag that looks like a semver tag.
          tag=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0)
          echo "Latest tag: $tag"
          if [[ $tag == "" ]]; then
            echo "No semver tag found, use 0.0.0"
            tag="v0.0.0"
          fi
          # Get the major, minor and patch parts from the tag.
          major_minor_patch=$(echo $tag | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
          echo "Major, minor and patch version: $major_minor_patch"
          major=$(echo $major_minor_patch | grep -oE "^[0-9]+")
          minor=$(echo $major_minor_patch | grep -oE "\.[0-9]+\." | grep -oE "[0-9]+")
          patch=$(echo $major_minor_patch | grep -oE "[0-9]+$")
          echo "Major version: $major"
          echo "Minor version: $minor"
          echo "Patch version: $patch"
          commits=$(git rev-list $tag.. --count)
          echo "Commits since last tag: $commits"
          # If any of commit messages contains "BREAKING" string, increment major version.
          breaking_changes=$(git log $tag.. --pretty=%B | grep -iE "BREAKING" | wc -l)
          echo "Breaking changes: $breaking_changes"
          if [[ $breaking_changes -gt 0 ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          else
            # Increment minor version.
            features=$(git log $tag.. --pretty=%B | grep -iE "feat|compatibility|integration|enhance|improvement|upgrade|perf|improve" | wc -l)
            echo "Features: $features"
            if [[ $features -gt 0 ]]; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi
          fi
          # Calculate the new version number.
          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"
          # Set the new tag.
          echo "tag=$new_version" >> $GITHUB_OUTPUT

      - name: Build Executables 🗄️ 🔃
        run: |
          mkdir -p bin
          allowed_archs="amd64 arm arm64 386"
          for var in $(go tool dist list); do
            if [[ ! $allowed_archs =~ "$(cut -d '/' -f 2 <<<$var)" ]]; then
                echo "Skipping: $var"
                continue
            fi
            file_name="jiotv_go-${{ steps.gen_tag.outputs.tag }}-$(cut -d '/' -f 1 <<<$var)-$(cut -d '/' -f 2 <<<$var)"
            case "$(cut -d '/' -f 1 <<<$var)" in
                "windows")
                    echo "Building $var"
                    GOOS="$(cut -d '/' -f 1 <<<$var)" GOARCH="$(cut -d '/' -f 2 <<<$var)" go build -o bin/"$file_name.exe" -trimpath -ldflags="-s -w" ./cmd/jiotv_go
                  ;;
                  "linux" | "darwin")
                    echo "Building $var"
                    GOOS="$(cut -d '/' -f 1 <<<$var)" GOARCH="$(cut -d '/' -f 2 <<<$var)" go build -o bin/"$file_name" -trimpath -ldflags="-s -w" ./cmd/jiotv_go
                  ;;
                  *)
                    echo "Skipping: $var"
                  ;;
            esac
          done

      - name: Release 📦
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          tag_name: ${{ steps.gen_tag.outputs.tag }}
          files: |
            ./bin/*
          generate_release_notes: true
          discussion_category_name: releases
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
